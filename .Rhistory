runApp('panelViz_app.R')
runApp('panelViz_app.R')
runApp('panelViz_app.R')
runApp('basic_registry_app.R')
runApp('consolidated_registry_app.R')
runApp('panelViz_app.R')
runApp('basic_registry_app.R')
df$cd4
runApp('panelViz_app.R')
runApp('panelViz_app.R')
colnames(df)
df <- read.csv('data/ehr_dataset.csv', fill = TRUE) %>%
mutate(Name = name,
VLS = toFactor(vls),
DM = toFactor(dx_diabetes),
DrugAbuse =toFactor(dx_alcoholism),
AlcoholAbuse = toFactor(dx_drug_abuse),
UnstableHousing = toFactor(unstable_housing),
NewDx = toFactor(new_dx),
HCV = toFactor(dx_hcv),
HTN = toFactor(dx_hypertension),
CVD = toFactor(dx_cardiovascular.disease),
CKD = toFactor(dx_ckd),
Depression = toFactor(dx_depression),
Anxiety = toFactor(dx_anxiety),
Schizophrenia = toFactor(dx_schizophrenia),
OfficeVisits = office_visits,
ERvisits = er_visits,
InpatientAdmits = inpatient_admissions,
HbA1c = hba1c,
CD4count = cd4
)
df <- df[!duplicated(df),]
df <- df[,c('Name',"VLS","DM","DrugAbuse","AlcoholAbuse","UnstableHousing","NewDx","HCV","HTN","CVD",
"CKD","Depression","Anxiety","Schizophrenia","HbA1c", "CD4count", "OfficeVisits", "ERvisits",
"InpatientAdmits")]
df <- df[sample(nrow(df)), ]
colnames(df)
runApp('panelViz_app.R')
runApp('consolidated_registry_app.R')
runApp('consolidated_registry_app.R')
?sidebarPanel
runApp('consolidated_registry_app.R')
runApp('consolidated_registry_app.R')
library(shiny); runApp('basic_registry_app.R')
mylist <- c(1,2,3,4)
names(mylist) <- c('first', 'second', 'third', 'fourth')
mylist['first']
mylist['first'][1]
mylist['first']*10
mylist[1]
mylist[0]
mylist[2]
mylist <- c(1,3,6,0)
mylist['first']
names(mylist) <- c('first', 'second', 'third', 'fourth')
mylist['first']
mylist['third']
mylist[3]
rawDF <- read.csv('data/ehr_dataset.csv')
df <- read.csv('data/ehr_dataset.csv', fill = TRUE) %>%
mutate(Name = name,
VLS = toFactor(vls),
DM = toFactor(dx_diabetes),
DrugAbuse =toFactor(dx_alcoholism),
AlcoholAbuse = toFactor(dx_drug_abuse),
UnstableHousing = toFactor(unstable_housing),
NewDx = toFactor(new_dx),
HCV = toFactor(dx_hcv),
HTN = toFactor(dx_hypertension),
CVD = toFactor(dx_cardiovascular.disease),
CKD = toFactor(dx_ckd),
Depression = toFactor(dx_depression),
Anxiety = toFactor(dx_anxiety),
Schizophrenia = toFactor(dx_schizophrenia),
OfficeVisits = office_visits,
ERvisits = er_visits,
InpatientAdmits = inpatient_admissions,
HbA1c = hba1c,
CD4count = cd4
)
# remove duplicate patients
df <- df[!duplicated(df),]
# care indiciators for the tool
df <- df[,c('Name',"VLS","DM","DrugAbuse","AlcoholAbuse","UnstableHousing","NewDx","HCV","HTN","CVD",
"CKD","Depression","Anxiety","Schizophrenia","HbA1c", "CD4count", "OfficeVisits", "ERvisits",
"InpatientAdmits")]
# shuffle order of dataframe
df <- df[sample(nrow(df)), ]
# get all cvariable names (excluding name)
variables = colnames(df)[-c(1:length(colnames))]
rawDF <- read.csv('data/ehr_dataset.csv')
df <- read.csv('data/ehr_dataset.csv', fill = TRUE) %>%
mutate(Name = name,
VLS = toFactor(vls),
DM = toFactor(dx_diabetes),
DrugAbuse =toFactor(dx_alcoholism),
AlcoholAbuse = toFactor(dx_drug_abuse),
UnstableHousing = toFactor(unstable_housing),
NewDx = toFactor(new_dx),
HCV = toFactor(dx_hcv),
HTN = toFactor(dx_hypertension),
CVD = toFactor(dx_cardiovascular.disease),
CKD = toFactor(dx_ckd),
Depression = toFactor(dx_depression),
Anxiety = toFactor(dx_anxiety),
Schizophrenia = toFactor(dx_schizophrenia),
OfficeVisits = office_visits,
ERvisits = er_visits,
InpatientAdmits = inpatient_admissions,
HbA1c = hba1c,
CD4count = cd4
)
# remove duplicate patients
df <- df[!duplicated(df),]
# care indiciators for the tool
df <- df[,c('Name',"VLS","DM","DrugAbuse","AlcoholAbuse","UnstableHousing","NewDx","HCV","HTN","CVD",
"CKD","Depression","Anxiety","Schizophrenia","HbA1c", "CD4count", "OfficeVisits", "ERvisits",
"InpatientAdmits")]
# shuffle order of dataframe
df <- df[sample(nrow(df)), ]
# get all cvariable names (excluding name)
variables = colnames(df)[-c(1:length(colnames))]
variables
# get all cvariable names (excluding name)
variables = colnames(df)[-c(1:length(colnames))]
variables
df <- read.csv('data/ehr_dataset.csv', fill = TRUE) %>%
mutate(Name = name,
VLS = toFactor(vls),
DM = toFactor(dx_diabetes),
DrugAbuse =toFactor(dx_alcoholism),
AlcoholAbuse = toFactor(dx_drug_abuse),
UnstableHousing = toFactor(unstable_housing),
NewDx = toFactor(new_dx),
HCV = toFactor(dx_hcv),
HTN = toFactor(dx_hypertension),
CVD = toFactor(dx_cardiovascular.disease),
CKD = toFactor(dx_ckd),
Depression = toFactor(dx_depression),
Anxiety = toFactor(dx_anxiety),
Schizophrenia = toFactor(dx_schizophrenia),
OfficeVisits = office_visits,
ERvisits = er_visits,
InpatientAdmits = inpatient_admissions,
HbA1c = hba1c,
CD4count = cd4
)
################
# define functions #
####################
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
# range standardization
standard_range <- function(x){
(x-min(x))/(max(x)-min(x))
}
# converts Yes/No to 1/0
yes2one <- function(x){
return(ifelse(x =='Yes', 1, 0))
}
######################
# load & format data #
######################
rawDF <- read.csv('data/ehr_dataset.csv')
df <- read.csv('data/ehr_dataset.csv', fill = TRUE) %>%
mutate(Name = name,
VLS = toFactor(vls),
DM = toFactor(dx_diabetes),
DrugAbuse =toFactor(dx_alcoholism),
AlcoholAbuse = toFactor(dx_drug_abuse),
UnstableHousing = toFactor(unstable_housing),
NewDx = toFactor(new_dx),
HCV = toFactor(dx_hcv),
HTN = toFactor(dx_hypertension),
CVD = toFactor(dx_cardiovascular.disease),
CKD = toFactor(dx_ckd),
Depression = toFactor(dx_depression),
Anxiety = toFactor(dx_anxiety),
Schizophrenia = toFactor(dx_schizophrenia),
OfficeVisits = office_visits,
ERvisits = er_visits,
InpatientAdmits = inpatient_admissions,
HbA1c = hba1c,
CD4count = cd4
)
# remove duplicate patients
df <- df[!duplicated(df),]
# care indiciators for the tool
df <- df[,c('Name',"VLS","DM","DrugAbuse","AlcoholAbuse","UnstableHousing","NewDx","HCV","HTN","CVD",
"CKD","Depression","Anxiety","Schizophrenia","HbA1c", "CD4count", "OfficeVisits", "ERvisits",
"InpatientAdmits")]
# shuffle order of dataframe
df <- df[sample(nrow(df)), ]
# get all cvariable names (excluding name)
variables = colnames(df)[-c(1:length(colnames))]
variables
runApp('basic_registry_app.R')
runApp('basic_registry_app.R')
runApp('basic_registry_app.R')
mylist
mylist[c('first', 'fourth')]
runApp('basic_registry_app.R')
runApp('basic_registry_app.R')
mylist + 'dick'
c('name', mylist)
names(df)
runApp('basic_registry_app.R')
runApp('basic_registry_app.R')
?tibble
?rownames_to_column
runApp('basic_registry_app.R')
runApp('basic_registry_app.R')
runApp('consolidated_registry_app.R')
runApp('consolidated_registry_app.R')
runApp('basic_registry_app.R')
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
library(ggplot2)
library(plotly)
library(fields)
library(RColorBrewer)
library(sortable)
library(shinydashboard)
library(shinyWidgets)
####################
# define functions #
####################
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
# range standardization
standard_range <- function(x){
(x-min(x))/(max(x)-min(x))
}
# converts Yes/No to 1/0
yes2one <- function(x){
return(ifelse(x =='Yes', 1, 0))
}
# converts Yes/No to 1/0
yes2zero <- function(x){
return(ifelse(x =='Yes', 0, 1))
}
# computes MAGIQ weights for an ordered list of arbitrary length
magiqWeights <- function(list){
weights <- c()
for (i in 1:length(list)){
weights[i] <- (1/i)/length(list)
}
return(weights)
}
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# computes MAGIQ weights for an ordered list of arbitrary length
weights <- magiqWeights(orderList)
# compute weighted sum for each patient
weightSum <- 0
# for each variable in orderList
for (i in 1:length(orderList)){
# isolate & normalize variable
if (orderList[i] %in% c("DM","DrugAbuse","AlcoholAbuse","UnstableHousing","NewDx","HCV","HTN","CVD",
"CKD","Depression","Anxiety","Schizophrenia")){
vector <- yes2one(X[orderList[i]])
} else if (orderList[i] %in% c("VLS")){
vector <- yes2zero(X[orderList[i]])
} else if (orderList[i] %in% c("OfficeVisits", "CD4count")){
vector = 1- (ntile(X[orderList[i]], 100)/100)
} else if (orderList[i] %in% c("ERvisits","InpatientAdmits", "HbA1c")){
vector = ntile(X[orderList[i]], 100)/100
} else {
print(paste(orderList[i], "-", "variable error"))
vector <- X[orderList[i]]
}
# multiply normalized varible by respective MAGIQ weight
weighted_vector <-standard_range(vector)*weights[i]
# add normalized weighted vector to priority score
weightSum <- weightSum + weighted_vector
}
# bizarre behavior for encounter variables; this fixes bug
if (is.null(dim(weightSum))) {
return(weightSum)
} else {
return(weightSum[,1])
}
}
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
# return unquoted objects
return(
print(as.name(paste(myList, collapse=', ')))
)
}
######################
# load & format data #
######################
rawDF <- read.csv('data/ehr_dataset.csv')
df <- read.csv('data/ehr_dataset.csv', fill = TRUE) %>%
mutate(Name = name,
VLS = toFactor(vls),
DM = toFactor(dx_diabetes),
DrugAbuse =toFactor(dx_alcoholism),
AlcoholAbuse = toFactor(dx_drug_abuse),
UnstableHousing = toFactor(unstable_housing),
NewDx = toFactor(new_dx),
HCV = toFactor(dx_hcv),
HTN = toFactor(dx_hypertension),
CVD = toFactor(dx_cardiovascular.disease),
CKD = toFactor(dx_ckd),
Depression = toFactor(dx_depression),
Anxiety = toFactor(dx_anxiety),
Schizophrenia = toFactor(dx_schizophrenia),
OfficeVisits = office_visits,
ERvisits = er_visits,
InpatientAdmits = inpatient_admissions,
HbA1c = hba1c,
CD4count = cd4
)
# remove duplicate patients
df <- df[!duplicated(df),]
# care indiciators for the tool
df <- df[,c('Name',"VLS","DM","DrugAbuse","AlcoholAbuse","UnstableHousing","NewDx","HCV","HTN","CVD",
"CKD","Depression","Anxiety","Schizophrenia","HbA1c", "CD4count", "OfficeVisits", "ERvisits",
"InpatientAdmits")]
# shuffle order of dataframe
df <- df[sample(nrow(df)), ]
# get all cvariable names (excluding name)
variables = colnames(df)[-c(1:length(colnames))]
names(variables) <- c('Virally Suppressed', 'Diabetes', 'Active Drug Use', 'Alcoholism', 'Unstable Housing', 'New HIV Diagnosis',
'Chronic HCV', 'Hypertension', 'Cardiovascular Disease', 'Chronic Kidney Disease', 'Major Depression',
'Anxiety Disorder', 'Schizophrenia', 'Most recent HbA1c value', 'Most recent CD4 count', '# Office visits',
'# Emergency Room visits', '# Inpatient admissions')
variables
names(variables
)
names(variables)[-"Virally Suppressed"]
names(variables)[!"Virally Suppressed"]
names(variables)[1]
names(variables)[-11]
names(variables)[-1]
names(variables)[-1, -2]
names(variables)[c(-1, -2)]
names(variables)[c(-1, -3)]
names(variables)[c(-1, -3)]
names(variables)[c(1, 3)]
variables[names(variables)[c(1, 3)]]
runApp('panelViz_app.R')
runApp('panelViz_app.R')
runApp('panelViz_app.R')
names(df)
c('Name', names(variables))
runApp('panelViz_app.R')
library(shiny); runApp('panelViz_app.R')
library(shiny); runApp('panelViz_app.R')
runApp('panelViz_app.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
names(df)
index(df)
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('deprecated/panelViz_app_with_clustering.R')
runApp('deprecated/panelViz_app_with_clustering.R')
runApp('deprecated/panelViz_app_with_clustering.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
?rev
?styleInterval
runApp('panelViz_app_v2.R')
?scall_fill_gradientn
?scale_fill_gradientn
?formatSytyle
?formatStyle
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
rownames(df)
runApp('panelViz_app_v2.R')
?nearPoints
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
dtype
type
class
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
?datatable
runApp('panelViz_app_v2.R')
?formatStyle
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
?styleInterval
unique(df[c("fill", "weightRank")])
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
?formatStyle
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
df
runApp('panelViz_app_v2.R')
paste(df$HbA1c)
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
class(c(1,2,3))
class(df$HbA1c)
runApp('panelViz_app_v2.R')
df$HbA1c[1:length(df$HbA1c)-1]
runApp('panelViz_app_v2.R')
?rv
?rev
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('deprecated/panelViz_app_with_clustering.R')
runApp('deprecated/panelViz_app_with_clustering.R')
runApp('deprecated/panelViz_app_with_clustering.R')
?styleInterval
runApp('panelViz_app_v2.R')
?formatStyle
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
patient_index = 839
patient_index + 10
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
df
df[10,]
df[10,+10]
df[10+10,]
1:10
runApp('panelViz_app_v2.R')
df[patient_index:(patient_index+10),]
patient_index = 10
df[patient_index,]
df[patient_index:(patient_index+10),]
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
runApp('panelViz_app_v2.R')
as.numeric()
runApp('panelViz_app_v2.R')
