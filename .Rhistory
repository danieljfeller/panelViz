paste(
to_list(
for(i in order[order %in% selected])
paste0('desc(',i,")")), collapse=',')
)[[1]]
unquote(
syms(
paste(
to_list(
for(i in order[order %in% selected])
paste0('desc(',i,")")), collapse=',')
)[[1]])
!!'x'
dplyr:!!
'x'
dplyr::!!'x'
dplyr::!!'x'
set_names()
set_names(setOrder)
runApp('selectVariables.R')
arrange(
unquote(
syms(
paste(
to_list(
for(i in order[order %in% selected])
paste0('desc(',i,")")), collapse=',')
)[[1]])
)
syms(
paste(for(i in selectedOrder) paste('desc(',i,")", sep=""),
collapse = ',')
)
UQS(syms(
input$selectedVariables_order[input$selectedVariables_order %in% input$selectedVariables]
))
selectedOrder <- order[order %in% selected]
paste(for(i in selectedOrder) paste('desc(',i,")", sep=""),
collapse = ',')
paste(for(i in selectedOrder) paste('desc(',i,")", sep="")
paste(for(i in selectedOrder) paste('desc(',i,")", sep=""))
paste(for(i in selectedOrder) paste('desc(',i,")", sep=""))
selectedOrder
paste(for(i in selectedOrder) paste('desc(',i,")", sep=""), collapse = ',')
for(i in selectedOrder) paste('desc(',i,")", sep="")
to_list(for(i in selectedOrder) paste('desc(',i,")", sep=""))
to_list(paste(
for(i in selectedOrder) paste('desc(',i,")", sep=""),
collapse = '')
)
paste(
for(i in selectedOrder) paste('desc(',i,")", sep=""),
collapse = '')
paste(for(i in selectedOrder) paste('desc(',i,")", sep=""), collapse = '')
for(i in selectedOrder) paste('desc(',i,")", sep="")
to_list(for(i in selectedOrder) paste('desc(',i,")", sep=""))
''.join.(for(i in selectedOrder) paste('desc(',i,")", sep=""))
''.join(for(i in selectedOrder) paste('desc(',i,")", sep=""))
"".join(for(i in selectedOrder) paste('desc(',i,")", sep=""))
"".join(to_list(for(i in selectedOrder) paste('desc(',i,")", sep="")))
to_list(for(i in selectedOrder) paste('desc(',i,")", sep=""))
(1:length(selectedOrder))
for(i in {1:length(selectedOrder)})print(i)
for(i in {1:length(selectedOrder)})print(selectedOrder[i])
for(i in {1:length(selectedOrder)})print(paste('desc(',selectedOrder[i],')'))
for(i in {1:length(selectedOrder)})print(
paste('desc(',selectedOrder[i],')', sep = ''))
mylist <- for(i in {1:length(selectedOrder)})paste('desc(',selectedOrder[i],')', sep = '')
mylist
mylist <- to_list(for(i in {1:length(selectedOrder)})paste('desc(',selectedOrder[i],')', sep = ''))
mylist
mylist <- syms(to_list(for(i in {1:length(selectedOrder)})paste('desc(',selectedOrder[i],')', sep = '')))
mylist
mylist <- ''.join(to_list(for(i in {1:length(selectedOrder)})paste('desc(',selectedOrder[i],')', sep = '')))
mylist <- ''join.(to_list(for(i in {1:length(selectedOrder)})paste('desc(',selectedOrder[i],')', sep = '')))
for(i in {1:length(selectedOrder)})paste('desc(',selectedOrder[i],')', sep = '')
for(i in {1:length(selectedOrder)})print(paste('desc(',selectedOrder[i],')', sep = ''))
formatSort <- function(){
for(i in 1:length(selectedOrder)){
print(paste('desc(',selectedOrder[i],')', sep = ''))
}
}
formatSort()
formatSort <- function(){
myList <- c()
for(i in 1:length(selectedOrder)){
myList <-c(l, paste('desc(',selectedOrder[i],')', sep = ''))
print(myList)
}
}
formatSort <- function(){
myList <- c()
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
print(myList)
}
}
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
print(myList)
}
formatSort(selectedOrder)
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
string = ','.join(myList)
print(string)
}
formatSort(selectedOrder)
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
string = "".join(myList)
print(string)
}
formatSort(selectedOrder)
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
string = ''.join(myList)
print(string)
}
formatSort(selectedOrder)
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
#string = ''.join(myList)
#print(string)
}
formatSort(selectedOrder)
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
string = ''.join(str(e) for e in myList)
print(string)
}
formatSort(selectedOrder)
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
print(myList)
}
formatSort(selectedOrder)
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
print(paste(myList, collapse=''))
}
formatSort(selectedOrder)
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
print(paste(myList, collapse=', '))
}
formatSort(selectedOrder)
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
print(as.name(paste(myList, collapse=', ')))
}
formatSort(selectedOrder)
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
df %>%
arrange(formatSort(selectedOrder))
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
# return unquoted objects
return(
as.name(paste(myList, collapse=', '))
)
}
df %>%
arrange(formatSort(selectedOrder))
formatSort(selectedOrder)
df %>%
arrange_at(selectedOrder)
View(df %>%
arrange_at(selectedOrder))
selectedOrder
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
install.packages("shinythemes")
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
names(df)
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
cd4_brks
df$MissedApt
df <- read.csv('data/synthetic_patients.csv') %>%
mutate(VLS = ifelse(as.logical(VLS) == TRUE, "Yes", "No"),
drugAbuse = ifelse(as.logical(drugAbuse) == TRUE, "Yes", "No"),
etohAbuse = ifelse(as.logical(etohAbuse) == TRUE, "Yes", "No"),
LTFU = ifelse(as.logical(LTFU) == TRUE, "Yes", "No"),
UnstableHousing = ifelse(as.logical(UnstableHousing) == TRUE, "Yes", "No"),
MissedApt = ifelse(as.logical(MissedApt) == TRUE, "Yes", "No"),
NewDx = ifelse(as.logical(NewDx) == TRUE, "Yes", "No"),
HCV = ifelse(as.logical(HCV) == TRUE, "Yes", "No"),
HTN = ifelse(as.logical(HTN) == TRUE, "Yes", "No"),
behavioralDx = ifelse(as.logical(behavioralDx) == TRUE, "Yes", "No"),
hospitalizationRisk = round(hospitalizationRisk, digits = 2)
)
as.numeric(rownames(df))
DT::datatable(
df[-1,],
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE))
cd4_brks <- quantile(df$CD4, probs = seq(.05, .95, .10), na.rm = TRUE)
ID_brks <- quantile(as.numeric(rownames(df)), probs = seq(.01, .99, .01), na.rm = TRUE)
ID_brks
df[-1,],
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',  color = 'white',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
patientColors <- c('#a1d99b', '#a2d89b', '#a4d89a', '#a5d79a', '#a6d799', '#a8d699',
'#a9d598', '#aad598', '#abd498', '#add397', '#aed397', '#afd296', '#b0d196',
'#b1d195', '#b3d095', '#b4d095', '#b5cf94', '#b6ce94', '#b7ce93', '#b8cd93',
'#b9cc92', '#bacc92', '#bbcb92', '#bdca91', '#beca91', '#bfc990', '#c0c890',
'#c1c88f', '#c2c78f', '#c3c68f', '#c4c68e', '#c5c58e', '#c6c48d', '#c7c48d',
'#c8c38d', '#c9c28c', '#cac28c', '#cbc18b', '#ccc08b', '#cdc08a', '#cebf8a',
'#cebe8a', '#cfbe89', '#d0bd89', '#d1bc88', '#d2bc88', '#d3bb87', '#d4ba87',
'#d5ba87', '#d6b986', '#d7b886', '#d7b785', '#d8b785', '#d9b685', '#dab584',
'#dbb584', '#dcb483', '#ddb383', '#ddb283', '#deb282', '#dfb182', '#e0b081',
'#e1b081', '#e2af80', '#e2ae80', '#e3ad80', '#e4ad7f', '#e5ac7f', '#e6ab7e',
'#e6aa7e', '#e7aa7e', '#e8a97d', '#e9a87d', '#e9a77c', '#eaa67c', '#eba67c',
'#eca57b', '#eca47b', '#eda37a', '#eea37a', '#efa27a', '#efa179', '#f0a079',
'#f19f78', '#f29f78', '#f29e78', '#f39d77', '#f49c77', '#f49b76', '#f59b76',
'#f69a76', '#f79975', '#f79875', '#f89774', '#f99674', '#f99574', '#fa9573',
'#fb9473', '#fb9372', '#fc9272')
DT::datatable(
df[-1,],
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',  color = 'white',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
df[-1,],
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
DT::datatable(
df[-1,],
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
DT::datatable(
df[-1,],
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('Name',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
DT::datatable(
df,
rownames = FALSE,
colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
DT::datatable(
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
DT::datatable(
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE))
df$ID <- as.numeric(rownames(df))
DT::datatable(
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE))
DT::datatable(
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle('Name', 'ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle(columns = 'Name',
valueColumns = 'ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle(df,
columns = 'Name',
valueColumns = 'ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
DT::datatable(
df,
rownames = FALSE,
#colnames = c(ID = 1),  # add the name
extensions = 'RowReorder',
selection = 'none',
autoHideNavigation = TRUE,
options = list(fixedHeader = TRUE,
pageLength = 100,
rowReorder = TRUE)) %>%
formatStyle(columns = 'Name',
valueColumns = 'ID',
fontWeight = 'bold',
backgroundColor = styleInterval(ID_brks, patientColors))
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
str(df)
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
runApp('selectVariables.R')
library(shiny); runApp('dashboard_ui.R')
install.packages('shinydashboard')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
df
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
?bucketlist
?bucket_list
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
runApp('dashboard_ui.R')
