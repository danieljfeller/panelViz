if (any(X[orderList[i]] == 'No' | X[orderList[i]] == 'Yes')){
vector <- yes2one(X[orderList[i]])
}
else {
vector <- X[orderList[i]]
}
#vector <-vector*weights[i]
print(standard_range(vector))
}
#return(weightSum)
}
computeWeightedSum(df,c('VLS', 'Cost'))
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(orderList)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(orderList)){
if (any(X[orderList[i]] == 'No' | X[orderList[i]] == 'Yes')){
vector <- yes2one(X[orderList[i]])
}
else {
vector <- X[orderList[i]]
}
vector <-standard_range(vector)weights[i]
print(vector)
}
#return(weightSum)
}
computeWeightedSum(df,c('VLS', 'Cost'))
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(orderList)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(orderList)){
if (any(X[orderList[i]] == 'No' | X[orderList[i]] == 'Yes')){
vector <- yes2one(X[orderList[i]])
}
else {
vector <- X[orderList[i]]
}
vector <-standard_range(vector)*weights[i]
print(vector)
}
#return(weightSum)
}
computeWeightedSum(df,c('VLS', 'Cost'))
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(orderList)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(orderList)){
if (any(X[orderList[i]] == 'No' | X[orderList[i]] == 'Yes')){
vector <- yes2one(X[orderList[i]])
}
else {
vector <- X[orderList[i]]
}
weighted_vector <-standard_range(vector)*weights[i]
weightSum <- weightSum + weighted_vector
}
return(weightSum)
}
computeWeightedSum(df,c('VLS', 'Cost'))
runApp()
runApp()
rawDF
runApp()
runApp()
"VLS"                 "hospitalizationRisk" "etohAbuse"
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
####################
# define functions #
####################
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
# range standardization
standard_range <- function(x){
(x-min(x))/(max(x)-min(x))
}
# converts Yes/No to 1/0
yes2one <- function(x){
return(ifelse(x =='Yes', 1, 0))
}
# computes MAGIQ weights for an ordered list of column names
magiqWeights <- function(list){
weights <- c()
for (i in 1:length(list)){
weights[i] <- (1/i)/length(list)
}
return(weights)
}
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(orderList)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(orderList)){
if (any(X[orderList[i]] == 'No' | X[orderList[i]] == 'Yes')){
vector <- yes2one(X[orderList[i]])
}
else {
vector <- X[orderList[i]]
}
weighted_vector <-standard_range(vector)*weights[i]
weightSum <- weightSum + weighted_vector
}
return(weightSum)
}
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
# return unquoted objects
return(
print(as.name(paste(myList, collapse=', ')))
)
}
###################
# compute weights #
###################
raw_df <- read.csv('synthetic_patients.csv')
selectedVariables <- c("VLS","hospitalizationRisk","etohAbuse")
raw_df$weightRank <- computeWeightedSum(raw_df, selectedVariables)
raw_df$weightRank
runApp()
runApp()
runApp()
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
####################
# define functions #
####################
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
# range standardization
standard_range <- function(x){
(x-min(x))/(max(x)-min(x))
}
# converts Yes/No to 1/0
yes2one <- function(x){
return(ifelse(x =='Yes', 1, 0))
}
# computes MAGIQ weights for an ordered list of column names
magiqWeights <- function(list){
weights <- c()
for (i in 1:length(list)){
weights[i] <- (1/i)/length(list)
}
return(weights)
}
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(orderList)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(orderList)){
if (any(X[orderList[i]] == 'No' | X[orderList[i]] == 'Yes')){
vector <- yes2one(X[orderList[i]])
}
else {
vector <- X[orderList[i]]
}
weighted_vector <-standard_range(vector)*weights[i]
weightSum <- weightSum + weighted_vector
}
return(weightSum)
}
# generates list for dplyr::arrange
formatSort <- function(selectedOrder){
myList <- c()
# loop over each column in selectedOrder
for(i in 1:length(selectedOrder)){
myList <-c(myList, paste('desc(',selectedOrder[i],')', sep = ''))
}
# return unquoted objects
return(
print(as.name(paste(myList, collapse=', ')))
)
}
###################
# compute weights #
###################
raw_df <- read.csv('synthetic_patients.csv')
selectedVariables <- c("VLS","hospitalizationRisk","etohAbuse")
raw_df$weightRank <- computeWeightedSum(raw_df, selectedVariables)
?type
runApp()
print(typeof(selectedVariables))
print(selectedVariables)
runApp()
print(typeof(raw_df))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
MAGIQscore <- computeWeightedSum(raw_df, selectedVariables)
MAGIQscore
MAGIQscore[,0]
MAGIQscore[:,1]
MAGIQscore[,1]
runApp()
runApp()
runApp()
runApp()
runApp()
rawDF
rawDF[1,]
runApp()
runApp()
runApp()
df
df[1,]
runApp()
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
library(ggplot2)
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2))
################
# hex bin plot #
################
df$rank <- row_number(df$Name)
df$j <- 1
df$i <- 1
counter = 0
offset <- 0.5 #offset for the hexagons when moving up a row
for (row in 1:23){
# change offset when increasing rows
offset <- ifelse(offset == 0.5, 0, 0.5)
for (column in 1:22){
counter <- counter + 1
df[df$rank == counter,]$i <- row
df[df$rank == counter,]$j <- column + offset
print(paste(counter, row, column + offset))
}
}
# get some colors
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
# plot the hex bins
ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
ggplotly(p)
install.packages('Cairo')
runApp()
x[!duplicated(x)]
x <- rawDF
x[!duplicated(x)]
x[!duplicated(x),]
runApp()
runApp()
install.packages(c("backports", "callr", "caTools", "clipr", "curl", "data.table", "devtools", "digest", "DT", "ellipsis", "ggplot2", "htmltools", "htmlwidgets", "httpuv", "httr", "kernlab", "later", "openssl", "pkgbuild", "pkgconfig", "plotly", "processx", "promises", "purrr", "R6", "Rcpp", "rlang", "roxygen2", "scales", "shiny", "sys", "testthat", "tidyr", "webshot", "whisker", "xml2"))
install.packages(c("boot", "foreign", "KernSmooth", "Matrix", "mgcv", "nlme", "survival"), lib="/usr/local/Cellar/r/3.6.1/lib/R/library")
shiny::runApp()
runApp()
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
library(ggplot2)
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2))
################
# hex bin plot #
################
df$rank <- row_number(df$Name)
df$j <- 1
df$i <- 1
counter = 0
offset <- 0.5 #offset for the hexagons when moving up a row
for (row in 1:23){
# change offset when increasing rows
offset <- ifelse(offset == 0.5, 0, 0.5)
for (column in 1:22){
counter <- counter + 1
df[df$rank == counter,]$i <- row
df[df$rank == counter,]$j <- column + offset
print(paste(counter, row, column + offset))
}
}
# get some colors
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
# plot the hex bins
ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
# plot the hex bins
ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
#scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
runApp()
runApp()
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
library(fields)
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
library(ggplot2)
library(fields)
library(RColorBrewer)
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
# plot the hex bins
ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
library(ggplot2)
library(fields)
library(RColorBrewer)
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2))
################
# hex bin plot #
################
df$rank <- row_number(df$Name)
df$j <- 1
df$i <- 1
counter = 0
offset <- 0.5 #offset for the hexagons when moving up a row
for (row in 1:23){
# change offset when increasing rows
offset <- ifelse(offset == 0.5, 0, 0.5)
for (column in 1:22){
counter <- counter + 1
df[df$rank == counter,]$i <- row
df[df$rank == counter,]$j <- column + offset
print(paste(counter, row, column + offset))
}
}
# get some colors
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
# plot the hex bins
ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
ggplotly(p)
d <- ggplot(data = df, aes(x=i, y=j, z=rank))
d + stat_summary_hex(fun=sum)
###########
# heatmap #
###########
counter = 0
for (row in 1:23){
# change offset when increasing rows
for (column in 1:22){
counter <- counter + 1
df[df$rank == counter,]$i <- row
df[df$rank == counter,]$j <- column + offset
print(paste(counter, row, column + offset))
}
}
ggplot(data = df, aes(x=i, y=j, fill = CD4))+
geom_bin2d(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplotly()
lilbrary(plotly)
# plot the hex bins
p <- ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
ggplotly(p)
library(shinyjqui)
library(DT)
library(shinythemes)
library(dplyr)
library(d3heatmap)
library(ggplot2)
library(fields)
library(RColorBrewer)
library(plotly)
# convert logical vector to character
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2))
################
# hex bin plot #
################
df$rank <- row_number(df$Name)
df$j <- 1
df$i <- 1
counter = 0
offset <- 0.5 #offset for the hexagons when moving up a row
for (row in 1:23){
# change offset when increasing rows
offset <- ifelse(offset == 0.5, 0, 0.5)
for (column in 1:22){
counter <- counter + 1
df[df$rank == counter,]$i <- row
df[df$rank == counter,]$j <- column + offset
print(paste(counter, row, column + offset))
}
}
# get some colors
ColRamp <- rev(designer.colors(n=10, col=brewer.pal(9, "Spectral")))
# plot the hex bins
p <- ggplot(data = df, aes(x=i, y=j, fill=hospitalizationRisk))+
geom_hex(stat='identity')+
scale_fill_gradientn(colours = ColRamp)+
theme_bw()+
coord_flip()
ggplotly(p)
library(Cairo)
install.packages('Cairo')
