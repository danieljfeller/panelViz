install.packages(c("DT", "shinyjqui", "shinythemes"))
shiny::runApp('panelViz')
setwd("~/devel/panelViz/app/panelViz")
runApp()
shiny::runApp()
install.packages("dplyr")
runApp()
runApp()
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2)
)
library(dplyr)
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2)
)
df
selectedOrder <- c("VLS", 'drugAbuse', 'hospitalizationRisk', 'UnstableHousing')
magiq <- function(list){
weights <- c()
for (i in 1:length(list)){
weights[i] <- (1/i)/length(list)
}
return(weights)
}
magiq(selectedOrder)
magiqWeights <- function(list){
weights <- c()
for (i in 1:length(list)){
weights[i] <- (1/i)/length(list)
}
return(weights)
}
magiqWeights(selectedOrder)
df[selectedOrder[1]]
df[selectedOrder[1]]*weights[1]
weights[1]
weights <- magiqWeights(selectedOrder)
weights[1]
df[selectedOrder[1]]*weights[1]
names(df)
read.csv('synthetic_patients.csv')
df <- read.csv('synthetic_patients.csv')
df[selectedOrder[1]]*weights[1]
for (i in 1:length(selectedOrder)){
print(i)
}
for (i in 1:length(selectedOrder)){
print(selectedOrder[i])
print(weights[i]
}
for (i in 1:length(selectedOrder)){
print(selectedOrder[i])
print(weights[i])
}
for (i in 1:length(selectedOrder)){
df[selectedOrder[1]]*weights[1]
}
for (i in 1:length(selectedOrder)){
print(df[selectedOrder[1]]*weights[1])
}
for (i in 1:length(selectedOrder)){
print(df[selectedOrder[i]]*weights[i])
}
for (i in 1:length(selectedOrder)){
weightSum <- 0
weightSum =+ df[selectedOrder[i]]*weights[i]
}
weightSum
weightSum <- 0
for (i in 1:length(selectedOrder)){
weightSum <- weightSum + df[selectedOrder[i]]*weights[i]
}
weightSum
shiny::runApp()
magiqWeights(), computeWeightedSum
runApp()
df
df[c('Name')]
df[c('Name', 'CD4')]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read.csv('synthetic_patients.csv') %>%
mutate(VLS = toFactor(VLS),
drugAbuse =toFactor(drugAbuse),
etohAbuse = toFactor(etohAbuse),
LTFU = toFactor(LTFU),
UnstableHousing = toFactor(UnstableHousing),
MissedApt = toFactor(MissedApt),
NewDx = toFactor(NewDx),
HCV = toFactor(HCV),
HTN = toFactor(HTN),
behavioralDx = toFactor(behavioralDx),
hospitalizationRisk = round(hospitalizationRisk, digits = 2))
raw_df <- read.csv('synthetic_patients.csv')
# get variable ranking
selectedOrder <- c("VLS", 'drugAbuse', 'hospitalizationRisk', 'UnstableHousing')
# get each patient's weighted sum
aw_df$weightRank <- computeWeightedSum(raw_df,selectedOrder)
# converts a binary to Yes/No
toFactor <- function(x){
return(as.factor(ifelse(as.logical(x) == TRUE, "Yes", "No")))
}
# computes MAGIQ weights for an ordered list
magiqWeights <- function(list){
weights <- c()
for (i in 1:length(list)){
weights[i] <- (1/i)/length(list)
}
return(weights)
}
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(selectedOrder)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(selectedOrder)){
weightSum <- weightSum + df[selectedOrder[i]]*weights[i]
}
return(weightSum)
}
selectedOrder <- c("VLS", 'drugAbuse', 'hospitalizationRisk', 'UnstableHousing')
# get each patient's weighted sum
raw_df$weightRank <- computeWeightedSum(raw_df,selectedOrder)
raw_df$weightRank
raw_df
str(raw_df)
# compute weight for each column in orderList
weights <- magiqWeights(selectedOrder)
weights
# computes weighted sum for patients in dataframe
computeWeightedSum <- function(X, orderList){
# compute weight for each column in orderList
weights <- magiqWeights(selectedOrder)
# compute weighted sum for each patient
weightSum <- 0
for (i in 1:length(selectedOrder)){
weightSum <- weightSum + X[selectedOrder[i]]*weights[i]
}
return(weightSum)
}
# get each patient's weighted sum
raw_df$weightRank <- computeWeightedSum(raw_df,selectedOrder)
testDF <- merge(df[-1,], raw_df[c('Name', 'weightRank')], by = 'Name')
testDF
runApp()
runApp()
# get each patient's weighted sum
raw_df$weightRank <- computeWeightedSum(raw_df,selectedOrder)
raw_df$weightRank
computeWeightedSum(raw_df,selectedOrder)
str(computeWeightedSum(raw_df,selectedOrder))
computeWeightedSum(raw_df,selectedOrder)$VLS
# get each patient's weighted sum
raw_df$weightRank <- computeWeightedSum(raw_df,selectedOrder)$VLS
raw_df$weightRank
runApp()
runApp()
runApp()
quantile(row.names(df), probs = seq(.05, .95, .10), na.rm = TRUE)
row.names(df)
quantile(row.names(df), probs = seq(.05, .95, .10), na.rm = TRUE)
quantile(row.names(df), probs = seq(.05, .95, .01), na.rm = TRUE)
quantile(row.names(df), probs = seq(.05, .95, .01))
quantile(row.names(df))
?quantile
str(row.names(df))
str(as.numeric(row.names(df)))
quantile(as.numeric(row.names(df))), probs = seq(.05, .95, .01))
quantile(as.numeric(row.names(df)), probs = seq(.05, .95, .01))
quantile(as.numeric(row.names(df)), probs = seq(0, 1, .01))
runApp()
runApp()
runApp()
runApp()
length(patientColors)
patientColors <- c('#a1d99b', '#a1d99b', '#a2d89b', '#a4d89a', '#a5d79a', '#a6d799', '#a8d699',
'#a9d598', '#aad598', '#abd498', '#add397', '#aed397', '#afd296', '#b0d196',
'#b1d195', '#b3d095', '#b4d095', '#b5cf94', '#b6ce94', '#b7ce93', '#b8cd93',
'#b9cc92', '#bacc92', '#bbcb92', '#bdca91', '#beca91', '#bfc990', '#c0c890',
'#c1c88f', '#c2c78f', '#c3c68f', '#c4c68e', '#c5c58e', '#c6c48d', '#c7c48d',
'#c8c38d', '#c9c28c', '#cac28c', '#cbc18b', '#ccc08b', '#cdc08a', '#cebf8a',
'#cebe8a', '#cfbe89', '#d0bd89', '#d1bc88', '#d2bc88', '#d3bb87', '#d4ba87',
'#d5ba87', '#d6b986', '#d7b886', '#d7b785', '#d8b785', '#d9b685', '#dab584',
'#dbb584', '#dcb483', '#ddb383', '#ddb283', '#deb282', '#dfb182', '#e0b081',
'#e1b081', '#e2af80', '#e2ae80', '#e3ad80', '#e4ad7f', '#e5ac7f', '#e6ab7e',
'#e6aa7e', '#e7aa7e', '#e8a97d', '#e9a87d', '#e9a77c', '#eaa67c', '#eba67c',
'#eca57b', '#eca47b', '#eda37a', '#eea37a', '#efa27a', '#efa179', '#f0a079',
'#f19f78', '#f29f78', '#f29e78', '#f39d77', '#f49c77', '#f49b76', '#f59b76',
'#f69a76', '#f79975', '#f79875', '#f89774', '#f99674', '#f99574', '#fa9573',
'#fb9473', '#fb9372', '#fc9272')
length(patientColors)
patientColors <- c('#a1d99b', '#a2d89b', '#a4d89a', '#a5d79a', '#a6d799', '#a8d699',
'#a9d598', '#aad598', '#abd498', '#add397', '#aed397', '#afd296', '#b0d196',
'#b1d195', '#b3d095', '#b4d095', '#b5cf94', '#b6ce94', '#b7ce93', '#b8cd93',
'#b9cc92', '#bacc92', '#bbcb92', '#bdca91', '#beca91', '#bfc990', '#c0c890',
'#c1c88f', '#c2c78f', '#c3c68f', '#c4c68e', '#c5c58e', '#c6c48d', '#c7c48d',
'#c8c38d', '#c9c28c', '#cac28c', '#cbc18b', '#ccc08b', '#cdc08a', '#cebf8a',
'#cebe8a', '#cfbe89', '#d0bd89', '#d1bc88', '#d2bc88', '#d3bb87', '#d4ba87',
'#d5ba87', '#d6b986', '#d7b886', '#d7b785', '#d8b785', '#d9b685', '#dab584',
'#dbb584', '#dcb483', '#ddb383', '#ddb283', '#deb282', '#dfb182', '#e0b081',
'#e1b081', '#e2af80', '#e2ae80', '#e3ad80', '#e4ad7f', '#e5ac7f', '#e6ab7e',
'#e6aa7e', '#e7aa7e', '#e8a97d', '#e9a87d', '#e9a77c', '#eaa67c', '#eba67c',
'#eca57b', '#eca47b', '#eda37a', '#eea37a', '#efa27a', '#efa179', '#f0a079',
'#f19f78', '#f29f78', '#f29e78', '#f39d77', '#f49c77', '#f49b76', '#f59b76',
'#f69a76', '#f79975', '#f79875', '#f89774', '#f99674', '#f99574', '#fa9573',
'#fb9473', '#fb9372', '#fc9272')
length(patientColors)
patient_brks <- quantile(as.numeric(row.names(df)), probs = seq(0, 1, .01))
length(patient_brks)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df %>% rownames_to_column()
df %>% add_rownames()
df %>% tibble::rownames_to_column()
runApp()
runApp()
runApp()
df %>% tibble::rownames_to_column()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(patientColors)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
patientColors <- c('#fc9272', '#fa9473', '#f89574', '#f69775', '#f49876', '#f29a77', '#f09b77',
'#ef9c78', '#ed9e79', '#ec9f79', '#eaa07a', '#e9a17b', '#e8a27b', '#e6a37c', '#e5a47c', '#e4a57d',
'#e3a67d', '#e1a77e', '#e0a87f', '#dfa97f', '#dea980', '#ddaa80', '#dcab81', '#dbac81', '#daad82',
'#d9ae82', '#d8ae82', '#d7af83', '#d6b083', '#d5b184', '#d4b184', '#d3b285', '#d2b385', '#d1b485',
'#d0b486', '#cfb586', '#ceb687', '#cdb687', '#ccb787', '#ccb888', '#cbb888', '#cab989', '#c9ba89',
'#c8ba89', '#c7bb8a', '#c7bc8a', '#c6bc8a', '#c5bd8b', '#c4be8b', '#c3be8c', '#c3bf8c', '#c2bf8c',
'#c1c08d', '#c0c18d', '#bfc18d', '#bfc28e', '#bec28e', '#bdc38e', '#bcc48f', '#bcc48f', '#bbc58f',
'#bac590', '#b9c690', '#b9c690', '#b8c791', '#b7c891', '#b7c891', '#b6c992', '#b5c992', '#b4ca92',
'#b4ca93', '#b3cb93', '#b2cb93', '#b2cc93', '#b1cc94', '#b0cd94', '#b0ce94', '#afce95', '#aecf95',
'#aecf95', '#add096', '#acd096', '#acd196', '#abd196', '#aad297', '#aad297', '#a9d397', '#a9d398',
'#a8d498', '#a7d498', '#a7d598', '#a6d599', '#a5d699', '#a5d699', '#a4d79a', '#a4d79a', '#a3d89a',
'#a2d89a', '#a2d99b', '#a1d99b', '#a1d99b')
length(patientColors)
runApp()
length(patient_brks)
runApp()
runApp()
patientColors <- c('#fc9272', '#fa9473', '#f89574', '#f69775', '#f49876', '#f29a77', '#f09b77',
'#ef9c78', '#ed9e79', '#ec9f79', '#eaa07a', '#e9a17b', '#e8a27b', '#e6a37c', '#e5a47c', '#e4a57d',
'#e3a67d', '#e1a77e', '#e0a87f', '#dfa97f', '#dea980', '#ddaa80', '#dcab81', '#dbac81', '#daad82',
'#d9ae82', '#d8ae82', '#d7af83', '#d6b083', '#d5b184', '#d4b184', '#d3b285', '#d2b385', '#d1b485',
'#d0b486', '#cfb586', '#ceb687', '#cdb687', '#ccb787', '#ccb888', '#cbb888', '#cab989', '#c9ba89',
'#c8ba89', '#c7bb8a', '#c7bc8a', '#c6bc8a', '#c5bd8b', '#c4be8b', '#c3be8c', '#c3bf8c', '#c2bf8c',
'#c1c08d', '#c0c18d', '#bfc18d', '#bfc28e', '#bec28e', '#bdc38e', '#bcc48f', '#bcc48f', '#bbc58f',
'#bac590', '#b9c690', '#b9c690', '#b8c791', '#b7c891', '#b7c891', '#b6c992', '#b5c992', '#b4ca92',
'#b4ca93', '#b3cb93', '#b2cb93', '#b2cc93', '#b1cc94', '#b0cd94', '#b0ce94', '#afce95', '#aecf95',
'#aecf95', '#add096', '#acd096', '#acd196', '#abd196', '#aad297', '#aad297', '#a9d397', '#a9d398',
'#a8d498', '#a7d498', '#a7d598', '#a6d599', '#a5d699', '#a5d699', '#a4d79a', '#a4d79a', '#a3d89a',
'#a2d89a', '#a2d99b', '#a2d99b', '#a1d99b', '#a1d99b')
length(patientColors)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
